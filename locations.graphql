scalar Date

schema {
  query: Query
  mutation: Mutation
}

type Query {
    test: String
    me: User
}

enum AuthError {
    INCORRECT_CREDENTIALS
    MISSING_PARAMS
}

type AuthResponse {
    jwt: ID
    error: AuthError
}

type Mutation {
    createUserAndSendVerification(email: String!, password: String!, username: String!): AuthResponse # JWT
    verifyUserEmail(token: ID!): Boolean
    login(username: String!, password: String!): AuthResponse
}

type User {
    id: ID!
    username: String!
    email: String!
    pwHash: String!
    applications: [Application!]
    emailVerified: Boolean!
}

enum Likelihood {
    REACH
    TARGET
    SAFETY
}

type Deadline {
    exists: Boolean!
    due: Date
    decision: Date
}

type DeadlineSet {
    EA: Deadline!
    ED: Deadline!
    ED2: Deadline!
    RD: Deadline!
}

type Prompt {
    wordCount: Int
    question: String
    optional: Boolean
}

type Application {
    prompts: [Prompt!]
    likelihood: Likelihood!
    collegeName: String!
    location: String!
    acceptanceRate: Float! # required info? maybe not?
    deadlines: DeadlineSet!
}
