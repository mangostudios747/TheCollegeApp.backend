scalar Date
type Query {
    test: String
}

type Temp {
    jwt: ID!

}

type Mutation {
    createUserAndSendVerification(email: String!, password: String!, username: String!): Temp # JWT
    verifyUserEmail(token: ID!): User
    login(username: String!, password: String!): User
}

type User {
    id: ID!
    username: String!
    email: String!
    pwHash: String!
    applications: [Application!]
}

enum Likelihood {
    REACH
    TARGET
    SAFETY
}

type Deadline {
    exists: Boolean!
    due: Date
    decision: Date
}

type DeadlineSet {
    EA: Deadline!
    ED: Deadline!
    ED2: Deadline!
    RD: Deadline!
}

type Prompt {
    wordCount: Int
    question: String
    optional: Boolean
}

type Application {
    prompts: [Prompt!]
    likelihood: Likelihood!
    collegeName: String!
    location: String!
    acceptanceRate: Float! # required info? maybe not?
    deadlines: DeadlineSet!
}